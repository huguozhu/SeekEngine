//STAGE:ps
#include "Common.dsh"
#include "IBL.dsh"
#include "BRDF.dsh"

TextureCube tex_env;

cbuffer roughness
{
    float roughness;
}

float4 main(
	in float3 iWorldPos : POSITION) : SV_Target
{
	float3 N = normalize(iWorldPos);
	// make the simplyfying assumption that V equals R equals the normal 
	float3 R = N;
	float3 V = R;
	
	static uint SAMPLE_COUNT = 1024;
	float3 prefiltered_color = float3(0, 0, 0);
	float total_weight = 0.0;
	for (uint i = 0; i < SAMPLE_COUNT; ++i)
	{
		float2 Xi = Hammersley(i, SAMPLE_COUNT);
		float3 H = ImportanceSampleGGX(Xi, N, roughness);
		float3 L = normalize(2.0 * dot(V, H) * H - V);
		
		float NdotL = max(dot(N, L), 0.0);
		if (NdotL > 0.0)
		{
		    // sample from the environment's mip level based on roughness/pdf
            float D   = D_TrowbridgeReitzGGX(N, H, roughness);
            float NdotH = max(dot(N, H), 0.0);
            float HdotV = max(dot(H, V), 0.0);
            float pdf = D * NdotH / (4.0 * HdotV) + 0.0001; 
			
			float w;
			float h;
			tex_env.GetDimensions(w, h);
            float resolution = w; // resolution of source cubemap (per face)
            float saTexel  = 4.0 * PI / (6.0 * resolution * resolution);
            float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);

            float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel); 
            
            prefiltered_color 	+= tex_env.SampleLevel(linear_sampler, L, mipLevel).rgb * NdotL;
            total_weight 		+= NdotL;
		}
	}
	prefiltered_color = prefiltered_color / total_weight;
	return float4(prefiltered_color, 1.0);
}
