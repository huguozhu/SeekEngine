//PREDEFINE:RGB_TO_SRGB=0,1
//STAGE:cs
#include "common.dsh"

static const float3x3 ColorCvtLimited = { 0.257f, 0.504f, 0.098f, -0.148f, -0.291f, 0.439f, 0.439f, -0.368f, -0.071f };
static const float3x1 ColorCvtOffsetLimited = { 0.0627f, 0.502f, 0.502f };

cbuffer copy_rect
{
    uint4 copy_rect;
}

RWTexture2D<float> dst_ai420;;
Texture2D src_rgba;

inline uint2 coordFrom1Dto2D(uint coord, uint texW)
{
    return uint2(coord % texW, coord / texW);
}

[numthreads(8, 8, 1)]
void main(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    uint x = 2 * dispatchThreadId.x;
    uint y = 2 * dispatchThreadId.y;

    uint xoffset = copy_rect.x;
    uint yoffset = copy_rect.y;
    uint dstW = copy_rect.z;
    uint dstH = copy_rect.w;

    if (x >= dstW - 1 || y >= dstH - 1)
        return;

	uint texW, texH;
    dst_ai420.GetDimensions(texW, texH);

    uint2 coord00 = uint2(x + 0, y + 0);
    uint2 coord10 = uint2(x + 1, y + 0);
    uint2 coord01 = uint2(x + 0, y + 1);
    uint2 coord11 = uint2(x + 1, y + 1);

    uint2 p00, p10, p01, p11;
    p00 = coord00 + uint2(xoffset, yoffset);
    p10 = coord10 + uint2(xoffset, yoffset);
    p01 = coord01 + uint2(xoffset, yoffset);
    p11 = coord11 + uint2(xoffset, yoffset);

    if (p00.x == dstW - 1)
    {
        p10.x = p00.x;
        p11.x = p00.x;
    }

    if (p00.y == dstH - 1)
    {
        p01.y = p00.y;
        p11.y = p00.y;
    }

#if RGB_TO_SRGB == 1
    float3 tmp = src_rgba[p00].rgb;
    tmp = 1.055 * pow(abs(tmp), 1.0/2.4) - 0.055;
    float3 yuv00 = mul(ColorCvtLimited, tmp) + ColorCvtOffsetLimited;
    tmp = src_rgba[p10].rgb;
    tmp = 1.055 * pow(abs(tmp), 1.0/2.4) - 0.055;
    float3 yuv10 = mul(ColorCvtLimited, tmp) + ColorCvtOffsetLimited;
    tmp = src_rgba[p01].rgb;
    tmp = 1.055 * pow(abs(tmp), 1.0/2.4) - 0.055;
    float3 yuv01 = mul(ColorCvtLimited, tmp) + ColorCvtOffsetLimited;
    tmp = src_rgba[p11].rgb;
    tmp = 1.055 * pow(abs(tmp), 1.0/2.4) - 0.055;
    float3 yuv11 = mul(ColorCvtLimited, tmp) + ColorCvtOffsetLimited;
#else
    float3 yuv00 = mul(ColorCvtLimited, src_rgba[p00].rgb) + ColorCvtOffsetLimited;
    float3 yuv10 = mul(ColorCvtLimited, src_rgba[p10].rgb) + ColorCvtOffsetLimited;
    float3 yuv01 = mul(ColorCvtLimited, src_rgba[p01].rgb) + ColorCvtOffsetLimited;
    float3 yuv11 = mul(ColorCvtLimited, src_rgba[p11].rgb) + ColorCvtOffsetLimited;
#endif

    // A
    dst_ai420[coordFrom1Dto2D(coord00.x + coord00.y * dstW, texW)] = src_rgba[p00].a;
    dst_ai420[coordFrom1Dto2D(coord10.x + coord10.y * dstW, texW)] = src_rgba[p10].a;
    dst_ai420[coordFrom1Dto2D(coord01.x + coord01.y * dstW, texW)] = src_rgba[p01].a;
    dst_ai420[coordFrom1Dto2D(coord11.x + coord11.y * dstW, texW)] = src_rgba[p11].a;
    // Y
    dst_ai420[coordFrom1Dto2D(coord00.x + coord00.y * dstW + dstW * dstH, texW)] = yuv00.r;
    dst_ai420[coordFrom1Dto2D(coord10.x + coord10.y * dstW + dstW * dstH, texW)] = yuv10.r;
    dst_ai420[coordFrom1Dto2D(coord01.x + coord01.y * dstW + dstW * dstH, texW)] = yuv01.r;
    dst_ai420[coordFrom1Dto2D(coord11.x + coord11.y * dstW + dstW * dstH, texW)] = yuv11.r;
    // UV
    dst_ai420[coordFrom1Dto2D(coord00.x / 2 + coord00.y / 2 * dstW / 2 + dstW * dstH * 2, texW)] = float(yuv00.g + yuv10.g + yuv01.g + yuv11.g) / 4;
    dst_ai420[coordFrom1Dto2D(coord00.x / 2 + coord00.y / 2 * dstW / 2 + dstW * dstH * 9 / 4, texW)] = float(yuv00.b + yuv10.b + yuv01.b + yuv11.b) / 4;
}
