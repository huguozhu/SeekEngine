#pragma once

#include "common.dsh"

StructuredBuffer<float4> morph_input;

cbuffer morph_weights
{
    float4 morph_weights[MAX_MORPH_SIZE];
}

cbuffer prev_morph_weights
{
    float4 prev_morph_weights[MAX_MORPH_SIZE];
}

cbuffer MORPH_SIZE
{
    uint MORPH_SIZE;
}

void CalcMorphTarget(uint vertex_id, inout float4 pos, inout float4 normal)
{
#if MORPH_TYPE != MORPH_COMPONENT_NONE

    int startIdx = (int)vertex_id * MORPH_SIZE;
    int i;

#if MORPH_TYPE & MORPH_COMPONENT_POS
    for (i = 0; i < MORPH_SIZE; i++)
    {
        pos += morph_input[startIdx + i] * morph_weights[i].x;
    }
#endif

#if MORPH_TYPE & MORPH_COMPONENT_NORMAL
    startIdx = vertex_id * MORPH_SIZE * 2;
    for (i = 0; i < MORPH_SIZE; i++)
    {
        normal += morph_input[startIdx + i] * morph_weights[i].x;
    }
#endif

#endif
}

void CalcPrevMorphTarget(uint vertex_id, inout float4 pos, inout float4 normal)
{
#if MORPH_TYPE != MORPH_COMPONENT_NONE

    int startIdx = (int)vertex_id * MORPH_SIZE;
    int i;

#if MORPH_TYPE & MORPH_COMPONENT_POS
    for (i = 0; i < MORPH_SIZE; i++)
    {
        pos += morph_input[startIdx + i] * prev_morph_weights[i].x;
    }
#endif

#if MORPH_TYPE & MORPH_COMPONENT_NORMAL
    startIdx = vertex_id * MORPH_SIZE * 2;
    for (i = 0; i < MORPH_SIZE; i++)
    {
        normal += morph_input[startIdx + i] * prev_morph_weights[i].x;
    }
#endif

#endif
}