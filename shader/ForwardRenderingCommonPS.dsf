//PREDEFINE:LIGHT_MODE=0,1
//PREDEFINE:HAS_MATERIAL_ALBEDO=0,1
//PREDEFINE:HAS_MATERIAL_NORMAL=0,1
//PREDEFINE:HAS_MATERIAL_METALLIC_ROUGHNESS=0,1
//PREDEFINE:HAS_MATERIAL_NORMAL_MASK=0,1
//STAGE:ps
#include "Common.dsh"
#include "Lighting.dsh"

cbuffer materialInfo
{
    MaterialInfo materialInfo;
};

cbuffer lightInfo
{
    LightInfo lightInfo[6];
};

cbuffer cameraInfo
{
    CameraInfo cameraInfo;
};

#if HAS_MATERIAL_ALBEDO
Texture2D albedoTex;
#endif

#if HAS_MATERIAL_NORMAL
Texture2D normalTex;
#endif

#if HAS_MATERIAL_METALLIC_ROUGHNESS
Texture2D metallicRoughnessTex;
#endif

#if HAS_MATERIAL_NORMAL_MASK
Texture2D normalMaskTex;
#endif

float3 CalcEnvironmentAmbient(MaterialParam materialParam, float2 texcoord, float3 N, float3 V)
{
	float ambientOcclusion = 1.0;
	
	float3 diffuse = 0.0;
	
	const float MAX_REFLECTION_LOD = 4.0;		
	float3 specular = 0.0;
	
	float3 kSpecular = materialParam.fresnel;
	float3 kDiffuse = float3(1.0, 1.0, 1.0) - kSpecular;
	kDiffuse *= 1.0 - materialParam.metallic;
	float3 ambient = (kDiffuse * diffuse + specular) * ambientOcclusion;
	return ambient;
}


float3 CalcLighting(MaterialParam materialParam, LightInfo lightInfo, float2 iTexcoord, float3 posWorld, float3 N, float3 V, float shadow)
{
    float3 Lo;
    [branch]
    if (lightInfo.type == LIGHT_TYPE_AMBIENT)
    {
        float ambientOcclusion = 1.0;
        Lo = CalcLightingIBL(materialParam, lightInfo, ambientOcclusion);
    }
    else
    {
        float3 L;
        float lightAttenuation = 1.0;
        [branch]
        if (lightInfo.type == LIGHT_TYPE_DIRECTIONAL)
        {
            L = normalize(-lightInfo.direction);
            lightAttenuation = 1.0;
        }
        else if (lightInfo.type == LIGHT_TYPE_SPOT)
        {
            L = normalize(lightInfo.posWorld - posWorld);
            float3 posToLight = lightInfo.posWorld - posWorld;
            lightAttenuation = GetDistanceAttenuation(posToLight, lightInfo.falloffRadius);
            lightAttenuation *= GetSpotAngleAttenuation(L, lightInfo.direction, lightInfo.inOutCutoff);
        }
        else if (lightInfo.type == LIGHT_TYPE_POINT)
        {
            L = normalize(lightInfo.posWorld - posWorld);
            float3 posToLight = lightInfo.posWorld - posWorld;
            lightAttenuation = GetDistanceAttenuation(posToLight, lightInfo.falloffRadius);
        }
#if LIGHT_MODE == 1
        Lo = CalcLightingBRDF(materialParam, lightInfo, lightAttenuation, N, L, V, shadow);
#else
        Lo = CalcLightingPhong(materialParam, lightInfo, lightAttenuation, N, L, V, shadow);
#endif
    }
    return Lo;
}

struct VSOutput
{
    float2 texCoord     : TEXCOORD;
    float3 normal       : NORMAL;
#if HAS_MATERIAL_NORMAL
    float4 tangent      : TANGENT;
#endif // HAS_MATERIAL_NORMAL
    float3 posWorld     : POSITION0;
    float4 pos          : SV_POSITION;
};

struct PSOutput
{
    float4 color    : SV_Target0;
};

MaterialParam CalcMaterialParam(MaterialInfo materialInfo, float2 texCoord, float3 N, float3 V)
{
	MaterialParam materialParam;
	
	materialParam.albedo = materialInfo.albedoFactor.xyz;
	materialParam.alpha  = materialInfo.albedoFactor.w;
#if HAS_MATERIAL_ALBEDO
    float4 albedo = albedoTex.Sample(linear_sampler, texCoord);
    materialParam.albedo *= albedo.xyz;
    materialParam.alpha = albedo.w;
#endif // HAS_MATERIAL_ALBEDO
	
	materialParam.metallic = materialInfo.metallicFactor;
    materialParam.roughness = materialInfo.roughnessFactor;
#if HAS_MATERIAL_METALLIC_ROUGHNESS
    float3 _rgb = metallicRoughnessTex.Sample(linear_sampler, texCoord).rgb;
    materialParam.metallic *= _rgb.b;
    materialParam.roughness *= _rgb.g;
#endif // HAS_MATERIAL_METALLIC_ROUGHNESS
		
	float3 specularColor = CalcSpecularColor(materialParam.albedo, materialParam.metallic);
    float3 F0 = specularColor;
	materialParam.fresnel = F_Schlick(max(dot(N, V), 0.0), F0);
	
	return materialParam;
}

float3x3 CalcTBN(float3 normal, float4 tangent)
{
    float3 T = normalize(tangent.xyz);
    float3 N = normalize(normal);
    T = normalize(T - dot(T, N) * N);
    float3 B = cross(N, T) * tangent.w;
		
    return float3x3(T, B, N);
}

PSOutput main(VSOutput input)
{
    PSOutput output;

    float3 normal = input.normal;
    if (materialInfo.hasBasicTex.x == 1234) // input.texCoord may be optimized out, so hardcode here
        normal = float3(input.texCoord, 0.5);
#if HAS_MATERIAL_NORMAL
    float3 pixelNormal = normalTex.Sample(linear_sampler, input.texCoord).rgb;
    pixelNormal = (pixelNormal * 2.0 - 1.0) * float3(materialInfo.normalScale, materialInfo.normalScale, 1.0);

#if HAS_MATERIAL_NORMAL_MASK
    float4 normalMask = normalMaskTex.Sample(linear_sampler, input.texCoord);
    float influence = min(dot(normalMask, materialInfo.normalMaskWeights), 1.0);
    pixelNormal = pixelNormal * float3(influence, influence, 1.0);
#endif

    float3x3 TBN = CalcTBN(normal, input.tangent);
    normal = mul(pixelNormal, TBN);
#endif

    float3 color = float3(0.0, 0.0, 0.0);
    float3 N = normalize(normal);
    float3 V = normalize(cameraInfo.posWorld - input.posWorld);
	MaterialParam materialParam = CalcMaterialParam(materialInfo, input.texCoord, N, V);
	
    [unroll]
    for (uint lightIdx = 0; lightIdx < 6; lightIdx++)
    {
        [branch]
        if (lightInfo[lightIdx].type >= 0)
        {
            float shadow = 0.0;
            color += CalcLighting(materialParam, lightInfo[lightIdx], input.texCoord, input.posWorld, N, V, shadow);
        }
    }

    output.color = float4(color, materialParam.alpha);
	
    return output;
}
